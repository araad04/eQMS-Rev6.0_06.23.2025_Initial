import React, { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { navigateTo } from '@/lib/navigation';
import { useToast } from '@/hooks/use-toast';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { ArrowLeft, Save, Shield, Code } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

// Software Project Form Schema
const softwareProjectSchema = z.object({
  name: z.string().min(3, "Project name must be at least 3 characters"),
  description: z.string().optional(),
  classificationId: z.number().min(1, "IEC 62304 classification is required"),
  productFamily: z.string().optional(),
  intendedUse: z.string().min(10, "Intended use description required"),
  operatingEnvironment: z.string().min(10, "Operating environment description required"),
  softwareType: z.string().min(1, "Software type is required"),
  version: z.string().min(1, "Version is required"),
  projectManager: z.number().min(1, "Project manager is required"),
  createdBy: z.number().min(1, "Created by is required"),
});

type SoftwareProjectForm = z.infer<typeof softwareProjectSchema>;

const SoftwareProjectCreatePage: React.FC = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [autoGeneratedCode, setAutoGeneratedCode] = useState<string>('');

  const form = useForm<SoftwareProjectForm>({
    resolver: zodResolver(softwareProjectSchema),
    defaultValues: {
      name: '',
      description: '',
      classificationId: 1,
      productFamily: '',
      intendedUse: '',
      operatingEnvironment: '',
      softwareType: '',
      version: '1.0.0',
      projectManager: user?.id || 9999,
      createdBy: user?.id || 9999,
    },
  });

  // Generate project code when component loads
  React.useEffect(() => {
    const generateCode = async () => {
      try {
        // Fetch existing software projects to determine next code
        const response = await fetch('/api/software/projects', {
          headers: {
            'X-Auth-Local': 'true',
            'Content-Type': 'application/json'
          }
        });
        
        const projects = await response.json();
        const currentYear = new Date().getFullYear();
        
        // Find highest existing number for current year
        let maxNumber = 0;
        projects.forEach((project: any) => {
          const match = project.projectId?.match(/SW-\d{4}-(\d{3})/);
          if (match) {
            const num = parseInt(match[1]);
            if (num > maxNumber) {
              maxNumber = num;
            }
          }
        });
        
        const nextNumber = maxNumber + 1;
        const generatedCode = `SW-${currentYear}-${nextNumber.toString().padStart(3, '0')}`;
        setAutoGeneratedCode(generatedCode);
        
        toast({
          title: "Project Code Generated",
          description: `Automatic code assigned: ${generatedCode}`,
        });
      } catch (error) {
        // Fallback to simple generation
        const currentYear = new Date().getFullYear();
        const generatedCode = `SW-${currentYear}-001`;
        setAutoGeneratedCode(generatedCode);
        
        toast({
          title: "Project Code Generated",
          description: `Automatic code assigned: ${generatedCode}`,
        });
      }
    };
    
    generateCode();
  }, [toast]);

  const onSubmit = async (data: SoftwareProjectForm) => {
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/software/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Auth-Local': 'true'
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error('Failed to create software project');
      }

      const result = await response.json();
      
      toast({
        title: "Software Project Created",
        description: `IEC 62304 project created with code: ${result.projectId}`,
      });
      
      // Redirect back to design control
      setTimeout(() => {
        navigateTo('/design-control');
      }, 1500);
      
    } catch (error) {
      toast({
        title: "Creation Failed",
        description: "Unable to create software project. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container py-8">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Shield className="h-8 w-8 text-blue-600" />
            Create IEC 62304 Software Project
          </h1>
          <p className="text-muted-foreground mt-1">
            Create a new medical device software project with automatic code generation
          </p>
        </div>
        <Button 
          variant="outline"
          onClick={() => navigateTo('/design-control')}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Design Control
        </Button>
      </div>

      {/* Auto-generated Code Display */}
      {autoGeneratedCode && (
        <Card className="mb-6 border-blue-200 bg-blue-50">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Code className="h-5 w-5 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900">Auto-Generated Project Code</h3>
                  <p className="text-sm text-blue-700">This code will be automatically assigned to your software project</p>
                </div>
              </div>
              <Badge variant="secondary" className="bg-blue-100 text-blue-800 text-lg px-4 py-2">
                {autoGeneratedCode}
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      <Card>
        <CardHeader>
          <CardTitle>IEC 62304 Software Project Details</CardTitle>
          <CardDescription>
            Configure software project with proper safety classification and lifecycle requirements
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Project Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter software project name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="version"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Version *</FormLabel>
                      <FormControl>
                        <Input placeholder="1.0.0" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Describe the software project purpose and scope" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="classificationId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>IEC 62304 Classification *</FormLabel>
                      <Select onValueChange={(value) => field.onChange(parseInt(value))}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select safety classification" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="1">Class A - Non-safety software</SelectItem>
                          <SelectItem value="2">Class B - Non-life-threatening</SelectItem>
                          <SelectItem value="3">Class C - Life-threatening</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        IEC 62304 software safety classification based on potential patient harm
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="softwareType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Software Type *</FormLabel>
                      <Select onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select software type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Standalone">Standalone Software</SelectItem>
                          <SelectItem value="Embedded">Embedded Software</SelectItem>
                          <SelectItem value="SaMD">Software as Medical Device</SelectItem>
                          <SelectItem value="Component">Software Component</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="intendedUse"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Intended Use *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Describe the intended use of the software in the medical device" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      Define the intended use according to regulatory requirements
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="operatingEnvironment"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Operating Environment *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Describe the operating environment and conditions" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      Specify hardware, OS, network conditions, etc.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="productFamily"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product Family</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter product family or line" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex justify-end gap-3 pt-6">
                <Button type="button" variant="outline" onClick={() => navigateTo('/design-control')}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  <Save className="h-4 w-4 mr-2" />
                  {isSubmitting ? 'Creating...' : 'Create Software Project'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
};

export default SoftwareProjectCreatePage;